name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  fmt-clippy-test:
    name: Format, Clippy & Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: cargo fmt
        run: cargo fmt --all -- --check
      - name: cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: cargo test
        run: cargo test --all --verbose

  matrix-build:
    name: Matrix Build & Package
    needs: fmt-clippy-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: jorm-rs-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: jorm-rs-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: jorm-rs-macos-x86_64.tar.gz
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Add target & build
        run: |
          rustup target add ${{ matrix.target }} || true
          cargo build --release --target ${{ matrix.target }}
      - name: Package (non-Windows)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          tar -czf dist/${{ matrix.artifact }} -C target/${{ matrix.target }}/release jorm-rs || true
      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          Compress-Archive -Path target\${{ matrix.target }}\release\jorm-rs.exe -DestinationPath dist\${{ matrix.artifact }} -Force
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}

  coverage:
    name: Coverage (tarpaulin)
    needs: fmt-clippy-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin --force
      - name: Run coverage
        run: cargo tarpaulin --out Xml --output-dir target/coverage || true
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/coverage/cobertura.xml
          flags: coverage

  security:
    name: Security scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cargo-audit
        run: |
          cargo install cargo-audit --force
          cargo audit || true
      - name: cargo-deny
        run: |
          cargo install cargo-deny --force
          cargo deny check || true

  docs:
    name: Build & Deploy Docs
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build docs
        run: cargo doc --no-deps --document-private-items
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc